/*************************************************************************************************************************************
 * Position.cpp - code for Position class object
 *************************************************************************************************************************************/

// standard header files

// project header files
#include "conversions.h"
#include "Position.h"

/*************************************************************************************************************************************
 * constructor
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 1xx   xx/xx/2012   SDW   initial coding
 *************************************************************************************************************************************/
Position::Position(void)
{
}

/*************************************************************************************************************************************
 * destructor
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 1xx   xx/xx/2012   SDW   initial coding
 *************************************************************************************************************************************/
Position::~Position(void)
{
}

/*************************************************************************************************************************************
 * ChangeFlag - switch setting on flag
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 100   10/15/2015   SDW   initial coding
 *************************************************************************************************************************************/
void Position::ChangeFlag(U16 inflags)
{
	Flags_ ^= inflags;											// XOR the flags

	return;
}

/*************************************************************************************************************************************
 * Clear - clear position representation
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 100   09/21/2015   SDW   initial coding
 *************************************************************************************************************************************/
void Position::Clear(void)
{
	// local variables

	// process
	EPtarget_ = 0;
	Flags_ = CLEAR_POSITION;

	return;
}

/*************************************************************************************************************************************
 * FormatCastling - retrieve FEN string based on data member
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 100   09/29/2015   SDW   initial coding
 *************************************************************************************************************************************/
string Position::FormatCastling(void)
{
	//local variables
	string FENrec;

	// build FEN representation
	if (Flags_ & ANY_CASTLE)
	{
	if (Flags_ & WHITE_KINGSIDE)
		FENrec += "K";
	if (Flags_ & WHITE_QUEENSIDE)
		FENrec += "Q";
	if (Flags_ & BLACK_KINGSIDE)
		FENrec += "k";
	if (Flags_ & BLACK_QUEENSIDE)
		FENrec += "q";
	}
	else
		FENrec += "-";

	return FENrec;
}

/*************************************************************************************************************************************
 * FormatEP - retrieve FEN string based on data member
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 100   09/29/2015   SDW   initial coding
 *************************************************************************************************************************************/
string Position::FormatEP(void)
{
	// build FEN representation
	if (EPtarget_== 0)
		return "-";
	else
		return OffToNote(EPtarget_);
}

/*************************************************************************************************************************************
 * FormatSide - retrieve FEN string based on data member
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 100   09/29/2015   SDW   initial coding
 *************************************************************************************************************************************/
string Position::FormatSide(void)
{
	// build FEN representation
	if (Flags_ & WHITE_TO_MOVE)
		return "w";
	else
		return "b";
}

/*************************************************************************************************************************************
 * LoadCastling	- set castling flags based on FEN string
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 100   09/23/2015   SDW   initial coding
 *************************************************************************************************************************************/
void Position::LoadCastling(string FENrec)
{
	// local variables
	int ptr;													// for looping through buffer

	// translate string into board representation
	Flags_ &= WHITE_TO_MOVE;									// clear flags except for side-to-move
	for (ptr=0; ptr < FENrec.size(); ptr++)
	{
		switch (FENrec[ptr])
		{
		case 'K':
			Flags_ |= WHITE_KINGSIDE;
			break;
		case 'Q':
			Flags_ |= WHITE_QUEENSIDE;
			break;
		case 'k':
			Flags_ |= BLACK_KINGSIDE;
			break;
		case 'q':
			Flags_ |= BLACK_QUEENSIDE;
			break;
		}
	}
	return;
}

/*************************************************************************************************************************************
 * LoadEP - set EP target square based on FEN string
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 100   09/23/2015   SDW   initial coding
 *************************************************************************************************************************************/
void Position::LoadEP(string FENrec)
{
	if (FENrec[0] == '-')
		EPtarget_ = NULL;
	else
		EPtarget_ = NoteToOff(FENrec);

	return;
}

/*************************************************************************************************************************************
 * LoadSide - set side to move flag based on FEN string
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 100   09/23/2015   SDW   initial coding
 *************************************************************************************************************************************/
void Position::LoadSide(string FENrec)
{
	switch (FENrec[0])
		{
		case 'w':												// if white to move
			Flags_ |= WHITE_TO_MOVE;								// then set white to move flag
			break;
		case 'b':												// if black to move
			Flags_ &= ~WHITE_TO_MOVE;								// then clear white to move flag
			break;
		}

	return;
}

/*************************************************************************************************************************************
 * SideToMove - return side to move
 *
 * VRM      Date      By    Description
 * ===   ==========   ===   ==========================================================================================================
 * 100   10/13/2015   SDW   initial coding
 *************************************************************************************************************************************/
bool Position::SideToMove(void)
{
	if (Flags_ & WHITE_TO_MOVE)
		return white;
	else
		return black;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------



//
///*************************************************************************************************************************************
// * IsWhiteMove - test if white is side to move
// *
// * VRM      Date      By    Description
// * ===   ==========   ===   ==========================================================================================================
// * 112   09/17/2012   SDW   initial coding
// *************************************************************************************************************************************/
//bool Position::IsWhiteMove(void)
//{
//	if (Flags_ & WHITE_TO_MOVE)
//		return true;
//	else
//		return false;
//}
//

//

//

